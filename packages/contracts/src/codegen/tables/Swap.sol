// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";




    bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Swap")));
    bytes32 constant SwapTableId = _tableId;
  


      struct SwapData {
        bool is;
uint256 rate;
address index;
uint256 margin;
uint256 expiry;
      }


library Swap {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.BOOL;
_schema[1] = SchemaType.UINT256;
_schema[2] = SchemaType.ADDRESS;
_schema[3] = SchemaType.UINT256;
_schema[4] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](0);
    

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "is";
_fieldNames[1] = "rate";
_fieldNames[2] = "index";
_fieldNames[3] = "margin";
_fieldNames[4] = "expiry";
    return ("Swap", _fieldNames);
  }

  
    /** Register the table's schema */
    function registerSchema() internal {
      StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
    }
  

    /** Register the table's schema (using the specified store) */
    function registerSchema(IStore _store) internal {
      _store.registerSchema(_tableId, getSchema(), getKeySchema());
    }
  
  
    /** Set the table's metadata */
    function setMetadata() internal {
      (string memory _tableName, string[] memory _fieldNames) = getMetadata();
      StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
    }
  

    /** Set the table's metadata (using the specified store) */
    function setMetadata(IStore _store) internal {
      (string memory _tableName, string[] memory _fieldNames) = getMetadata();
      _store.setMetadata(_tableId, _tableName, _fieldNames);
    }
  

  
      /** Get is */
      function getIs() internal view returns (bool is) {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
        return (_toBool(uint8(Bytes.slice1(_blob, 0))));
      }
    

      /** Get is (using the specified store) */
      function getIs(IStore _store) internal view returns (bool is) {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
        return (_toBool(uint8(Bytes.slice1(_blob, 0))));
      }
    
      /** Set is */
      function setIs(bool is) internal {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((is)));
      }
    

      /** Set is (using the specified store) */
      function setIs(IStore _store,
bool is) internal {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((is)));
      }
    
      /** Get rate */
      function getRate() internal view returns (uint256 rate) {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
        return (uint256(Bytes.slice32(_blob, 0)));
      }
    

      /** Get rate (using the specified store) */
      function getRate(IStore _store) internal view returns (uint256 rate) {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
        return (uint256(Bytes.slice32(_blob, 0)));
      }
    
      /** Set rate */
      function setRate(uint256 rate) internal {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((rate)));
      }
    

      /** Set rate (using the specified store) */
      function setRate(IStore _store,
uint256 rate) internal {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((rate)));
      }
    
      /** Get index */
      function getIndex() internal view returns (address index) {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
        return (address(Bytes.slice20(_blob, 0)));
      }
    

      /** Get index (using the specified store) */
      function getIndex(IStore _store) internal view returns (address index) {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
        return (address(Bytes.slice20(_blob, 0)));
      }
    
      /** Set index */
      function setIndex(address index) internal {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((index)));
      }
    

      /** Set index (using the specified store) */
      function setIndex(IStore _store,
address index) internal {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((index)));
      }
    
      /** Get margin */
      function getMargin() internal view returns (uint256 margin) {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
        return (uint256(Bytes.slice32(_blob, 0)));
      }
    

      /** Get margin (using the specified store) */
      function getMargin(IStore _store) internal view returns (uint256 margin) {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
        return (uint256(Bytes.slice32(_blob, 0)));
      }
    
      /** Set margin */
      function setMargin(uint256 margin) internal {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((margin)));
      }
    

      /** Set margin (using the specified store) */
      function setMargin(IStore _store,
uint256 margin) internal {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((margin)));
      }
    
      /** Get expiry */
      function getExpiry() internal view returns (uint256 expiry) {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
        return (uint256(Bytes.slice32(_blob, 0)));
      }
    

      /** Get expiry (using the specified store) */
      function getExpiry(IStore _store) internal view returns (uint256 expiry) {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
        return (uint256(Bytes.slice32(_blob, 0)));
      }
    
      /** Set expiry */
      function setExpiry(uint256 expiry) internal {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((expiry)));
      }
    

      /** Set expiry (using the specified store) */
      function setExpiry(IStore _store,
uint256 expiry) internal {
        
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
        _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((expiry)));
      }
    

  
    /** Get the full data */
    function get() internal view returns (SwapData memory _table) {
      
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
      bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
      return decode(_blob);
    }
  

    /** Get the full data (using the specified store) */
    function get(IStore _store) internal view returns (SwapData memory _table) {
      
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
      bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
      return decode(_blob);
    }
  
    /** Set the full data using individual values */
    function set(bool is,
uint256 rate,
address index,
uint256 margin,
uint256 expiry) internal {
      bytes memory _data = encode(is,
rate,
index,
margin,
expiry);

      
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  

      StoreSwitch.setRecord(_tableId, _keyTuple, _data);
    }
  

    /** Set the full data using individual values (using the specified store) */
    function set(IStore _store,
bool is,
uint256 rate,
address index,
uint256 margin,
uint256 expiry) internal {
      bytes memory _data = encode(is,
rate,
index,
margin,
expiry);

      
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  

      _store.setRecord(_tableId, _keyTuple, _data);
    }
  
      /** Set the full data using the data struct */
      function set(SwapData memory _table) internal {
        set(_table.is,
_table.rate,
_table.index,
_table.margin,
_table.expiry);
      }
    

      /** Set the full data using the data struct (using the specified store) */
      function set(IStore _store,
SwapData memory _table) internal {
        set(_store,
_table.is,
_table.rate,
_table.index,
_table.margin,
_table.expiry);
      }
    
    /** Decode the tightly packed blob using this table's schema */
    function decode(bytes memory _blob) internal pure returns (SwapData memory _table) {
      
        _table.is = (_toBool(uint8(Bytes.slice1(_blob, 0))));
        

        _table.rate = (uint256(Bytes.slice32(_blob, 1)));
        

        _table.index = (address(Bytes.slice20(_blob, 33)));
        

        _table.margin = (uint256(Bytes.slice32(_blob, 53)));
        

        _table.expiry = (uint256(Bytes.slice32(_blob, 85)));
        
    }
    

  

  /** Tightly pack full data using this table's schema */
  function encode(bool is,
uint256 rate,
address index,
uint256 margin,
uint256 expiry) internal view returns (bytes memory) {
    
    return abi.encodePacked(is,
rate,
index,
margin,
expiry);
  }
  
  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple() internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](0);
    
  }

  
    /* Delete all data for given keys */
    function deleteRecord() internal {
      
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
      StoreSwitch.deleteRecord(_tableId, _keyTuple);
    }
  

    /* Delete all data for given keys (using the specified store) */
    function deleteRecord(IStore _store) internal {
      
    bytes32[] memory _keyTuple = new bytes32[](0);
    
  
      _store.deleteRecord(_tableId, _keyTuple);
    }
  
}


    function _toBool(uint8 value) pure returns (bool result) {
      assembly {
        result := value
      }
    }
    

